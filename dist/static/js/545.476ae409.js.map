{"version":3,"file":"static/js/545.476ae409.js","mappings":"6JAAA,IAAIA,EAAS,WAAkB,IAAIC,EAAIC,KAAKC,EAAGF,EAAIG,MAAMD,GAAG,OAAOA,EAAG,MAAM,CAACE,YAAY,SAAS,CAACF,EAAG,KAAK,CAACF,EAAIK,GAAGL,EAAIM,GAAGN,EAAIO,QAAQL,EAAG,WAAW,CAACM,MAAM,CAAC,KAAO,YAAY,CAACR,EAAIK,GAAG,eAAeL,EAAIS,GAAG,IAAI,EACjN,EACIC,EAAkB,CAAC,WAAY,IAAIV,EAAIC,KAAKC,EAAGF,EAAIG,MAAMD,GAAG,OAAOA,EAAG,MAAM,CAACM,MAAM,CAAC,GAAK,qBAAqB,CAACN,EAAG,SAAS,CAACS,YAAY,CAAC,MAAQ,QAAQ,OAAS,SAASH,MAAM,CAAC,GAAK,aAC3L,GCOA,G,SAAA,CACAI,IAAAA,GACA,OACAL,IAAA,GAEA,EACAM,OAAAA,GACA,KAAAC,MACA,EACAC,QAAA,CACAD,IAAAA,GAEA,KAAAP,IAAA,GAIA,MAAAS,EAAAC,SAAAC,eAAA,UACAC,EAAAH,EAAAI,WAAA,MAGAC,EAAA,IAAAC,MACAD,EAAAE,OAAA,WAEA,MAAAC,EAAAH,EAAAI,MACAC,EAAAL,EAAAM,OACAX,EAAAS,MAAAD,EACAR,EAAAW,OAAAD,EAGAP,EAAAS,UAAAP,EAAA,KAGA,MAAAQ,EAAA,CACA,CAAAC,EAAA,IAAAC,EAAA,KACA,CAAAD,EAAA,IAAAC,EAAA,IACA,CAAAD,EAAA,IAAAC,EAAA,KACA,CAAAD,EAAA,IAAAC,EAAA,KACA,CAAAD,EAAA,IAAAC,EAAA,KACA,CAAAD,EAAA,IAAAC,EAAA,MAIAZ,EAAAa,YAAA,UACAb,EAAAc,UAAA,EACAd,EAAAe,YACAf,EAAAgB,OAAAN,EAAA,GAAAC,EAAAD,EAAA,GAAAE,GACA,QAAAK,EAAA,EAAAA,EAAAP,EAAAQ,OAAA,EAAAD,IAAA,CACA,MAAAE,GAAAT,EAAAO,GAAAN,EAAAD,EAAAO,EAAA,GAAAN,GAAA,EACAS,GAAAV,EAAAO,GAAAL,EAAAF,EAAAO,EAAA,GAAAL,GAAA,EACAZ,EAAAqB,iBACAX,EAAAO,GAAAN,EACAD,EAAAO,GAAAL,EACAO,EACAC,EAEA,CAEApB,EAAAqB,iBACAX,EAAAA,EAAAQ,OAAA,GAAAP,EACAD,EAAAA,EAAAQ,OAAA,GAAAN,EACAF,EAAAA,EAAAQ,OAAA,GAAAP,EACAD,EAAAA,EAAAQ,OAAA,GAAAN,GAEAZ,EAAAsB,QACA,EAGApB,EAAAqB,IAAAC,EAAA,OAeA3B,EAAA4B,iBAAA,SAAAC,IAEA,IAAAC,EAAA9B,EAAA+B,wBACAjB,GAAAe,EAAAG,QAAAF,EAAAG,OAAAjC,EAAAS,MAAAqB,EAAArB,OACAM,GAAAc,EAAAK,QAAAJ,EAAAK,MAAAnC,EAAAW,OAAAmB,EAAAnB,QAOA,GANAG,EAAAA,EAAAsB,QAAA,GACArB,EAAAA,EAAAqB,QAAA,GAEA,KAAA7C,IAAA8C,KAAA,CAAAvB,EAAAC,IAGA,KAAAxB,IAAA8B,OAAA,GAIA,IAAAiB,EAAA,CACA,qBACA,qBACA,qBACA,qBACA,qBACA,oBACA,oBACA,oBACA,oBACA,oBACA,oBACA,oBACA,oBACA,oBACA,oBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,sBACA,sBACA,sBACA,sBACA,sBACA,qBACA,qBACA,qBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,sBAGA,MAAAC,EAAAD,EAAAE,KAAAC,GAAA,CACAC,WAAAD,EAAA,IACAC,WAAAD,EAAA,OAKA,IAAAE,EAAAC,OAAAC,UACAC,EAAAF,OAAAC,UACAE,EAAAH,OAAAI,UACAC,EAAAL,OAAAI,UAEA,QAAA5B,EAAA,EAAAA,EAAAmB,EAAAlB,OAAAD,IACAmB,EAAAnB,GAAA,GAAAuB,IAAAA,EAAAJ,EAAAnB,GAAA,IACAmB,EAAAnB,GAAA,GAAA2B,IAAAA,EAAAR,EAAAnB,GAAA,IACAmB,EAAAnB,GAAA,GAAA0B,IAAAA,EAAAP,EAAAnB,GAAA,IACAmB,EAAAnB,GAAA,GAAA6B,IAAAA,EAAAV,EAAAnB,GAAA,IAIAjB,EAAAa,YAAA,UACAb,EAAAc,UAAA,EACAd,EAAAe,YACAf,EAAAgB,OAAAoB,EAAA,MAAAA,EAAA,OACA,QAAAnB,EAAA,EAAAA,EAAAmB,EAAAlB,OAAA,EAAAD,IAAA,CACA,MAAAE,GACAiB,EAAAnB,GAAA,GAAAmB,EAAAnB,EAAA,SACAG,GACAgB,EAAAnB,GAAA,GAAAmB,EAAAnB,EAAA,SACAjB,EAAAqB,iBACAe,EAAAnB,GAAA,GACAmB,EAAAnB,GAAA,GACAE,EACAC,EAEA,CAEApB,EAAAqB,iBACAe,EAAAA,EAAAlB,OAAA,MACAkB,EAAAA,EAAAlB,OAAA,MACAkB,EAAAA,EAAAlB,OAAA,MACAkB,EAAAA,EAAAlB,OAAA,OAEAlB,EAAAsB,SAGAtB,EAAA+C,UAAA,qBACA/C,EAAAe,YACAf,EAAAgB,OAAAoB,EAAA,MAAAA,EAAA,OACA,QAAAnB,EAAA,EAAAA,EAAAmB,EAAAlB,OAAA,EAAAD,IAAA,CACA,MAAAE,GACAiB,EAAAnB,GAAA,GAAAmB,EAAAnB,EAAA,SACAG,GACAgB,EAAAnB,GAAA,GAAAmB,EAAAnB,EAAA,SACAjB,EAAAqB,iBACAe,EAAAnB,GAAA,GACAmB,EAAAnB,GAAA,GACAE,EACAC,EAEA,CAEApB,EAAAqB,iBACAe,EAAAA,EAAAlB,OAAA,MACAkB,EAAAA,EAAAlB,OAAA,MACAkB,EAAAA,EAAAlB,OAAA,MACAkB,EAAAA,EAAAlB,OAAA,OAEAlB,EAAAgD,YACAhD,EAAAiD,OAGAjD,EAAAa,YAAA,UACAb,EAAAc,UAAA,EACAd,EAAAkD,WAAAV,EAAAG,EAAAC,EAAAJ,EAAAM,EAAAH,EA6CA,IAEA,KChSwP,I,UCOpPQ,GAAY,OACd,EACAvE,EACAW,GACA,EACA,KACA,KACA,MAIF,EAAe4D,EAAiB,O","sources":["webpack://test_vue/./src/views/AboutView.vue","webpack://test_vue/src/views/AboutView.vue","webpack://test_vue/./src/views/AboutView.vue?9dba","webpack://test_vue/./src/views/AboutView.vue?296c"],"sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"about\"},[_c('h6',[_vm._v(_vm._s(_vm.ans))]),_c('a-button',{attrs:{\"type\":\"primary\"}},[_vm._v(\" Primary \")]),_vm._m(0)],1)\n}\nvar staticRenderFns = [function (){var _vm=this,_c=_vm._self._c;return _c('div',{attrs:{\"id\":\"canvas-container\"}},[_c('canvas',{staticStyle:{\"width\":\"750px\",\"height\":\"500px\"},attrs:{\"id\":\"canvas\"}})])\n}]\n\nexport { render, staticRenderFns }","<template>\r\n  <div class=\"about\">\r\n    <h6>{{ ans }}</h6>\r\n    <a-button type=\"primary\"> Primary </a-button>\r\n    <div id=\"canvas-container\">\r\n      <canvas id=\"canvas\" style=\"width: 750px; height: 500px\"></canvas>\r\n    </div>\r\n  </div>\r\n</template>\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      ans: [],\r\n    };\r\n  },\r\n  mounted() {\r\n    this.init();\r\n  },\r\n  methods: {\r\n    init() {\r\n      // console.log(this.ans, '   111')\r\n      this.ans = [];\r\n      // let  ans=[]\r\n      //canvas里面给定一个有多个动物的图片，后端给几百个X,Y坐标值的位置标记某一个动物的边界，\r\n      //然后由canvas绘制标记出这个动物，和其他动物隔开，并加上蒙层，并在这一个动物外面加一个红色矩形标注\r\n      const canvas = document.getElementById(\"canvas\");\r\n      const ctx = canvas.getContext(\"2d\");\r\n\r\n      // 加载图片\r\n      const image = new Image();\r\n      image.onload = function () {\r\n        // 设置canvas的宽高与图片一致\r\n        const imageWidth = image.width;\r\n        const imageHeight = image.height;\r\n        canvas.width = imageWidth;\r\n        canvas.height = imageHeight;\r\n\r\n        // 在Canvas中绘制图片\r\n        ctx.drawImage(image, 0, 0);\r\n\r\n        // 假设后端返回的标注信息为一个动物的曲线边界坐标\r\n        const boundary = [\r\n          { x: 100, y: 100 },\r\n          { x: 150, y: 50 },\r\n          { x: 200, y: 100 },\r\n          { x: 200, y: 200 },\r\n          { x: 150, y: 250 },\r\n          { x: 100, y: 200 },\r\n        ];\r\n\r\n        // 绘制曲线边界\r\n        ctx.strokeStyle = \"#ff0000\";\r\n        ctx.lineWidth = 2;\r\n        ctx.beginPath();\r\n        ctx.moveTo(boundary[0].x, boundary[0].y);\r\n        for (let i = 1; i < boundary.length - 2; i++) {\r\n          const controlPointX = (boundary[i].x + boundary[i + 1].x) / 2;\r\n          const controlPointY = (boundary[i].y + boundary[i + 1].y) / 2;\r\n          ctx.quadraticCurveTo(\r\n            boundary[i].x,\r\n            boundary[i].y,\r\n            controlPointX,\r\n            controlPointY\r\n          );\r\n        }\r\n        // 绘制最后两个点\r\n        ctx.quadraticCurveTo(\r\n          boundary[boundary.length - 2].x,\r\n          boundary[boundary.length - 2].y,\r\n          boundary[boundary.length - 1].x,\r\n          boundary[boundary.length - 1].y\r\n        );\r\n        ctx.stroke();\r\n      };\r\n\r\n      // 设置图片路径\r\n      image.src = require(\"@/assets/test_image.jpg\");\r\n\r\n      // 添加点击事件监听器获取动物边缘坐标值\r\n      // canvas.addEventListener('click', (event) => {\r\n      //   var rect = canvas.getBoundingClientRect();\r\n      //   var x = (event.clientX - rect.left) * (canvas.width / rect.width);\r\n      //   var y = (event.clientY - rect.top) * (canvas.height / rect.height);\r\n      //   x = x.toFixed(2); // 保留两位小数\r\n      //   y = y.toFixed(2); // 保留两位小数\r\n      //   // console.log(x, y, this.ans);\r\n      //   this.ans.push([x, y]);\r\n      //   // 在这里可以根据点击的坐标进行相应的操作\r\n      // });\r\n\r\n      // 点击图片返回一个坐标值，作为参数，调用后端接口，后端返回一个动物的边界坐标，根据坐标绘制图形边框\r\n      canvas.addEventListener(\"click\", (event) => {\r\n        // console.log('1111111111111111111111111')\r\n        var rect = canvas.getBoundingClientRect();\r\n        var x = (event.clientX - rect.left) * (canvas.width / rect.width);\r\n        var y = (event.clientY - rect.top) * (canvas.height / rect.height);\r\n        x = x.toFixed(2); // 保留两位小数\r\n        y = y.toFixed(2); // 保留两位小数\r\n        // console.log(x, y, this.ans);\r\n        this.ans.push([x, y]);\r\n        // 在这里可以根据点击的坐标进行相应的操作\r\n\r\n        if (this.ans.length > 0) {\r\n          // 后端接口\r\n          // 这里可以根据坐标值，调用后端接口，后端返回一个动物的边界坐标，根据坐标绘制图形边框\r\n          // console.log(this.ans);\r\n          let mockData = [\r\n            [\"822.84\", \"1132.64\"],\r\n            [\"825.85\", \"1111.67\"],\r\n            [\"831.88\", \"1084.70\"],\r\n            [\"834.89\", \"1054.74\"],\r\n            [\"840.92\", \"1024.78\"],\r\n            [\"843.93\", \"979.84\"],\r\n            [\"819.83\", \"919.92\"],\r\n            [\"810.79\", \"868.99\"],\r\n            [\"807.77\", \"818.06\"],\r\n            [\"801.75\", \"755.14\"],\r\n            [\"810.79\", \"695.22\"],\r\n            [\"871.05\", \"662.67\"],\r\n            [\"898.17\", \"650.68\"],\r\n            [\"928.31\", \"629.71\"],\r\n            [\"970.49\", \"614.73\"],\r\n            [\"1012.68\", \"614.73\"],\r\n            [\"1063.91\", \"602.75\"],\r\n            [\"1094.04\", \"617.73\"],\r\n            [\"1139.24\", \"617.73\"],\r\n            [\"1175.40\", \"647.69\"],\r\n            [\"1190.47\", \"671.65\"],\r\n            [\"1217.59\", \"716.59\"],\r\n            [\"1223.61\", \"749.95\"],\r\n            [\"1217.59\", \"815.86\"],\r\n            [\"1211.56\", \"857.80\"],\r\n            [\"1202.52\", \"908.74\"],\r\n            [\"1202.52\", \"929.71\"],\r\n            [\"1211.56\", \"959.67\"],\r\n            [\"1232.65\", \"989.63\"],\r\n            [\"1244.71\", \"1013.60\"],\r\n            [\"1253.75\", \"1025.58\"],\r\n            [\"1256.76\", \"1037.56\"],\r\n            [\"1247.72\", \"1034.97\"],\r\n            [\"1229.64\", \"1014.00\"],\r\n            [\"1205.53\", \"999.02\"],\r\n            [\"1199.51\", \"960.07\"],\r\n            [\"1190.47\", \"951.08\"],\r\n            [\"1178.41\", \"1002.01\"],\r\n            [\"1172.39\", \"1058.94\"],\r\n            [\"1163.35\", \"1109.87\"],\r\n            [\"1157.32\", \"1145.82\"],\r\n            [\"1127.19\", \"1148.82\"],\r\n            [\"1066.92\", \"1107.27\"],\r\n            [\"1075.96\", \"1152.21\"],\r\n            [\"1054.87\", \"1158.20\"],\r\n            [\"1030.76\", \"1149.22\"],\r\n            [\"1012.68\", \"1137.23\"],\r\n            [\"1030.76\", \"1092.29\"],\r\n            [\"1015.69\", \"1068.32\"],\r\n            [\"985.56\", \"1092.29\"],\r\n            [\"985.56\", \"1122.25\"],\r\n            [\"982.55\", \"1146.22\"],\r\n            [\"960.45\", \"1140.63\"],\r\n            [\"933.33\", \"1158.60\"],\r\n            [\"882.10\", \"1155.61\"],\r\n            [\"830.88\", \"1155.61\"],\r\n            [\"824.85\", \"1146.62\"],\r\n          ];\r\n          // 将字符串转换为数字\r\n          const processedBoundary = mockData.map((point) => [\r\n            parseFloat(point[0]),\r\n            parseFloat(point[1]),\r\n          ]);\r\n\r\n          // console.log('222222222222222222222')\r\n          // 找到动物曲线边界的最小和最大值·\r\n          let minX = Number.MAX_VALUE;\r\n          let minY = Number.MAX_VALUE;\r\n          let maxX = Number.MIN_VALUE;\r\n          let maxY = Number.MIN_VALUE;\r\n\r\n          for (let i = 0; i < processedBoundary.length; i++) {\r\n            if (processedBoundary[i][0] < minX) minX = processedBoundary[i][0];\r\n            if (processedBoundary[i][0] > maxX) maxX = processedBoundary[i][0];\r\n            if (processedBoundary[i][1] < minY) minY = processedBoundary[i][1];\r\n            if (processedBoundary[i][1] > maxY) maxY = processedBoundary[i][1];\r\n          }\r\n          // console.log('333333333333333')\r\n          // 绘制动物的曲线边界\r\n          ctx.strokeStyle = \"#67C23A\";\r\n          ctx.lineWidth = 2;\r\n          ctx.beginPath();\r\n          ctx.moveTo(processedBoundary[0][0], processedBoundary[0][1]);\r\n          for (let i = 1; i < processedBoundary.length - 2; i++) {\r\n            const controlPointX =\r\n              (processedBoundary[i][0] + processedBoundary[i + 1][0]) / 2;\r\n            const controlPointY =\r\n              (processedBoundary[i][1] + processedBoundary[i + 1][1]) / 2;\r\n            ctx.quadraticCurveTo(\r\n              processedBoundary[i][0],\r\n              processedBoundary[i][1],\r\n              controlPointX,\r\n              controlPointY\r\n            );\r\n          }\r\n          // 绘制最后两个点\r\n          ctx.quadraticCurveTo(\r\n            processedBoundary[processedBoundary.length - 2][0],\r\n            processedBoundary[processedBoundary.length - 2][1],\r\n            processedBoundary[processedBoundary.length - 1][0],\r\n            processedBoundary[processedBoundary.length - 1][1]\r\n          );\r\n          ctx.stroke();\r\n          // console.log('4444444444444444444')\r\n          // 添加蒙层\r\n          ctx.fillStyle = \"rgba(0, 0, 0, 0.5)\";\r\n          ctx.beginPath();\r\n          ctx.moveTo(processedBoundary[0][0], processedBoundary[0][1]);\r\n          for (let i = 1; i < processedBoundary.length - 2; i++) {\r\n            const controlPointX =\r\n              (processedBoundary[i][0] + processedBoundary[i + 1][0]) / 2;\r\n            const controlPointY =\r\n              (processedBoundary[i][1] + processedBoundary[i + 1][1]) / 2;\r\n            ctx.quadraticCurveTo(\r\n              processedBoundary[i][0],\r\n              processedBoundary[i][1],\r\n              controlPointX,\r\n              controlPointY\r\n            );\r\n          }\r\n          // 绘制最后两个点\r\n          ctx.quadraticCurveTo(\r\n            processedBoundary[processedBoundary.length - 2][0],\r\n            processedBoundary[processedBoundary.length - 2][1],\r\n            processedBoundary[processedBoundary.length - 1][0],\r\n            processedBoundary[processedBoundary.length - 1][1]\r\n          );\r\n          ctx.closePath();\r\n          ctx.fill();\r\n          // console.log('55555555555555555555')\r\n          // 添加红色矩形框标注\r\n          ctx.strokeStyle = \"#ff0000\";\r\n          ctx.lineWidth = 4;\r\n          ctx.strokeRect(minX, minY, maxX - minX, maxY - minY);\r\n          // console.log('666666666666666666666')\r\n\r\n          // // 找到动物曲线边界的最小和最大值\r\n          // let minX = processedBoundary[0][0];\r\n          // let minY = processedBoundary[0][1];\r\n          // let maxX = processedBoundary[0][0];\r\n          // let maxY = processedBoundary[0][1];\r\n\r\n          // for (let i = 1; i < processedBoundary.length; i++) {\r\n          //   if (processedBoundary[i][0] < minX) {\r\n          //     minX = processedBoundary[i][0];\r\n          //   }\r\n          //   if (processedBoundary[i][0] > maxX) {\r\n          //     maxX = processedBoundary[i][0];\r\n          //   }\r\n          //   if (processedBoundary[i][1] < minY) {\r\n          //     minY = processedBoundary[i][1];\r\n          //   }\r\n          //   if (processedBoundary[i][1] > maxY) {\r\n          //     maxY = processedBoundary[i][1];\r\n          //   }\r\n          // }\r\n          // // 绘制动物的曲线边界\r\n          // ctx.strokeStyle = '#67C23A';\r\n          // ctx.lineWidth = 2;\r\n          // ctx.beginPath();\r\n          // ctx.moveTo(processedBoundary[0][0], processedBoundary[0][1]);\r\n          // for (let i = 1; i < processedBoundary.length - 2; i++) {\r\n          //   const controlPointX = (processedBoundary[i][0] + processedBoundary[i + 1][0]) / 2;\r\n          //   const controlPointY = (processedBoundary[i][1] + processedBoundary[i + 1][1]) / 2;\r\n          //   ctx.quadraticCurveTo(processedBoundary[i][0], processedBoundary[i][1], controlPointX, controlPointY);\r\n          // }\r\n          // // 绘制最后两个点\r\n          // ctx.quadraticCurveTo(processedBoundary[processedBoundary.length - 2][0], processedBoundary[processedBoundary.length - 2][1], processedBoundary[processedBoundary.length - 1][0], processedBoundary[processedBoundary.length - 1][1]);\r\n          // ctx.stroke();\r\n\r\n          // // 添加蒙层\r\n          // ctx.fillStyle = 'rgba(0, 0, 0, 0.5)';\r\n          // ctx.fillRect(minX, minY, maxX - minX, maxY - minY);\r\n\r\n          // // 添加红色矩形框标注\r\n          // ctx.strokeStyle = '#ff0000';\r\n          // ctx.lineWidth = 4;\r\n          // ctx.strokeRect(minX, minY, maxX - minX, maxY - minY);\r\n        }\r\n      });\r\n    },\r\n  },\r\n};\r\n</script>\r\n","import mod from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./AboutView.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./AboutView.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./AboutView.vue?vue&type=template&id=614796bb\"\nimport script from \"./AboutView.vue?vue&type=script&lang=js\"\nexport * from \"./AboutView.vue?vue&type=script&lang=js\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_c","_self","staticClass","_v","_s","ans","attrs","_m","staticRenderFns","staticStyle","data","mounted","init","methods","canvas","document","getElementById","ctx","getContext","image","Image","onload","imageWidth","width","imageHeight","height","drawImage","boundary","x","y","strokeStyle","lineWidth","beginPath","moveTo","i","length","controlPointX","controlPointY","quadraticCurveTo","stroke","src","require","addEventListener","event","rect","getBoundingClientRect","clientX","left","clientY","top","toFixed","push","mockData","processedBoundary","map","point","parseFloat","minX","Number","MAX_VALUE","minY","maxX","MIN_VALUE","maxY","fillStyle","closePath","fill","strokeRect","component"],"sourceRoot":""}